// setup.js
// Generated By: Gemini 2.5 Flash LLM (01-07-2025)

import dotenv from 'dotenv';
import runDbSetup, { conditionalLog } from "./db-setup.js";

// Load environment variables.
// In production, we might want to suppress dotenv's own logging if it finds no .env file,
// as envs are expected to be set directly in the environment.
dotenv.config({ silent: process.env.NODE_ENV === 'production' });

/**
 * Validates the presence and correctness of essential environment variables.
 * @returns {Promise<void>} A promise that resolves if all essential environment variables are valid,
 * otherwise rejects with an Error.
 */
async function verifyEssentialEnvs() {
    const errors = [];

    // Validate SESSION_SECRET
    if (!process.env.SESSION_SECRET) {
        errors.push("SESSION_SECRET is not present. This is crucial for session security.");
    }

    // Validate DATABASE_TYPE
    const databaseType = process.env.DATABASE_TYPE;
    if (!databaseType) {
        errors.push("DATABASE_TYPE is not present. Please specify 'sqlite' or 'mongodb'.");
    } else {
        // Validate database-specific URLs based on DATABASE_TYPE
        if (databaseType === 'sqlite') {
            if (!process.env.DATABASE_URL_SQLITE) {
                errors.push("DATABASE_URL_SQLITE is not present for SQLite database type.");
            }
        } else if (databaseType === 'mongodb') {
            if (!process.env.DATABASE_URL_MONGODB) {
                errors.push("DATABASE_URL_MONGODB is not present for MongoDB database type.");
            }
        } else {
            errors.push(`Unsupported DATABASE_TYPE "${databaseType}". Supported types are 'sqlite' and 'mongodb'.`);
        }
    }

    if (errors.length > 0) {
        // Aggregate all errors into a single, more informative message
        const errorMessage = `Environment variable validation failed:\n- ${errors.join('\n- ')}`;
        conditionalLog(errorMessage, "error");
        throw new Error(errorMessage);
    }

    conditionalLog('Essential environment variables verified successfully.');
}

/**
 * The main function to set up the application, including environment verification and database setup.
 * Handles graceful shutdown on failure.
 */
async function main() {
    conditionalLog(`Starting setup in ${process.env.NODE_ENV || 'development'} environment...`);

    try {
        await verifyEssentialEnvs();
        await runDbSetup(process.env.DATABASE_TYPE);
        conditionalLog('Application setup completed successfully!');
    } catch (error) {
        conditionalLog('Fatal error during application setup:', error.message);
        // It's crucial to exit with a non-zero code to indicate failure in automated environments
        process.exit(1);
    }
}

// Execute the main setup function
main();
