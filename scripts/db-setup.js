// db-setup.js
// Generated By: Gemini 2.5 Flash LLM (01-07-2025)

import { exec } from 'node:child_process';
import path from 'node:path';

/**
 * Determines if logging should occur based on the environment.
 * @type {boolean}
 */
const shouldLog = process.env.NODE_ENV !== 'production';

/**
 * Logs messages conditionally based on the 'shouldLog' flag.
 * @param {string} message The message to log.
 * @param {'log' | 'error'} type The type of log (e.g., 'log', 'error').
 */
export function conditionalLog(message, type = 'log') {
    if (shouldLog) {
        if (type === 'error') {
            console.error(message);
        } else {
            console.log(message);
        }
    }
}

/**
 * Executes a shell command and logs its output conditionally.
 * @param {string} command The command to execute.
 * @returns {Promise<void>} A promise that resolves if the command succeeds, rejects otherwise.
 */
function executeCommand(command) {
    return new Promise((resolve, reject) => {
        conditionalLog(`Executing: ${command}`);
        const child = exec(command);

        child.stdout.on('data', (data) => {
            if (shouldLog) {
                process.stdout.write(data);
            }
        });

        child.stderr.on('data', (data) => {
            if (shouldLog) {
                process.stderr.write(data);
            }
        });

        child.on('close', (code) => {
            if (code === 0) {
                conditionalLog(`Command "${command}" exited with code ${code}`);
                resolve();
            } else {
                const errorMessage = `Command "${command}" exited with code ${code}`;
                conditionalLog(errorMessage, 'error');
                reject(new Error(errorMessage));
            }
        });

        child.on('error', (err) => {
            const errorMessage = `Failed to start command "${command}": ${err.message}`;
            conditionalLog(errorMessage, 'error');
            reject(err);
        });
    });
}

/**
 * Runs the setup for the SQLite database.
 * @returns {Promise<void>}
 */
export async function runSqliteDBSetup() {
    conditionalLog('--- Setting Up SQLite Database ---');
    const sqliteSchemaPath = path.join('prisma', 'sqliteSchema.prisma');

    try {
        await executeCommand(`npx prisma generate --schema=${sqliteSchemaPath}`);
        await executeCommand(`npx prisma migrate deploy --schema=${sqliteSchemaPath}`); // Using deploy for production-like environments
        conditionalLog('--- SQLite setup complete ---');
    } catch (error) {
        conditionalLog(`SQLite setup failed: ${error.message}`, 'error');
        throw error; // Re-throw to propagate the error
    }
}

/**
 * Runs the setup for the MongoDB database.
 * @returns {Promise<void>}
 */
export async function runMongoDBSetup() {
    conditionalLog('--- Setting Up MongoDB Database ---');
    const mongodbSchemaPath = path.join('prisma', 'mongodbSchema.prisma');

    try {
        await executeCommand(`npx prisma generate --schema=${mongodbSchemaPath}`);
        conditionalLog('--- MongoDB setup complete ---');
    } catch (error) {
        conditionalLog(`MongoDB setup failed: ${error.message}`, 'error');
        throw error; // Re-throw to propagate the error
    }
}

/**
 * Main function to run database setup based on the provided database type.
 * @param {string} DATABASE_TYPE The type of database to set up ('sqlite' or 'mongodb').
 * @returns {Promise<void>}
 * @throws {Error} If the database type is not supported.
 */
export default async function runDbSetup(DATABASE_TYPE) {
    if (!DATABASE_TYPE) {
        throw new Error("DATABASE_TYPE environment variable is not set.");
    }

    try {
        if (DATABASE_TYPE === 'sqlite') {
            await runSqliteDBSetup();
        } else if (DATABASE_TYPE === 'mongodb') {
            await runMongoDBSetup();
        } else {
            throw new Error(`Database type '${DATABASE_TYPE}' is not supported. Supported types are 'sqlite' and 'mongodb'.`);
        }
    } catch (error) {
        conditionalLog(`Database setup process encountered an error: ${error.message}`, 'error');
        // Depending on your application's needs, you might want to exit the process
        // or just re-throw the error for the calling code to handle.
        throw error;
    }
}
